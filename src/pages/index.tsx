import { Button } from "@chakra-ui/button";
import { Input, InputGroup, InputRightElement } from "@chakra-ui/input";
import { Box, Flex, Grid, Text } from "@chakra-ui/layout";
import Head from "next/head";
import { useEffect, useRef, useState } from "react";
import { v4 as uuidv4 } from "uuid";
import { SingleEvent } from "../components/single-event";
import { IEvent } from "../global.types";
import { formatTime, withStatus } from "../utils";

export default function Home() {
  const [name, setName] = useState<string>("");
  const [events, setEvents] = useState<IEvent[]>([]);
  const selectedEvent = useRef<IEvent>();
  selectedEvent.current = events.find((e) => e.status === "playing");

  const prevTimeRef = useRef<number>();
  const rafRef = useRef<number>();
  useEffect(() => {
    rafRef.current = requestAnimationFrame(updateTime);
    return () => cancelAnimationFrame(rafRef.current);
  }, []);

  const updateTime: FrameRequestCallback = (time) => {
    if (prevTimeRef != undefined && selectedEvent.current != null) {
      const delta = time - prevTimeRef.current;

      setEvents((oldEvents) => {
        const eIdx = oldEvents.findIndex(
          (event) => event.id === selectedEvent.current.id
        );
        const e = oldEvents[eIdx];
        return [
          ...oldEvents.slice(0, eIdx),
          {
            ...selectedEvent.current,
            duration: e.duration + delta,
          },
          ...oldEvents.slice(eIdx + 1, oldEvents.length),
        ];
      });
    }

    prevTimeRef.current = time;
    rafRef.current = requestAnimationFrame(updateTime);
  };

  const onCreateNewEvent = () => {
    if (name?.trim() === "") {
      return;
    }

    setEvents([
      ...events,
      {
        id: uuidv4(),
        name: name,
        status: "stopped",
        duration: 0,
      },
    ]);
    setName("");
  };

  const onPlay = (eventToPlay: IEvent) => {
    const eIdx = events.findIndex((event) => event.id === eventToPlay.id);
    setEvents([
      ...withStatus(events.slice(0, eIdx), "stopped"),
      {
        ...eventToPlay,
        status: "playing",
      },
      ...withStatus(events.slice(eIdx + 1, events.length), "stopped"),
    ]);
  };

  const onStop = () => {
    setEvents([...withStatus(events, "stopped")]);
  };

  const onDelete = (eventToDelete: IEvent) => {
    setEvents([...events.filter((e) => e.id !== eventToDelete.id)]);
  };

  return (
    <Box background="gray.50" minH="100vh">
      <Head>
        <title>Quick Timer</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex maxW="100%" p="8" w="1024px" m="0 auto" flexDir="column">
        <Grid mb="8" templateColumns={["1fr", "1fr 1fr"]} gap="4">
          <form
            onSubmit={(e) => {
              e.preventDefault();
              onCreateNewEvent();
              return false;
            }}
          >
            <InputGroup size="lg">
              <Input
                pr="4.5rem"
                placeholder="Event"
                value={name}
                background="white"
                onChange={(e) => setName(e.target.value)}
              />
              <InputRightElement width="4.5rem">
                <Button
                  h="1.75rem"
                  size="md"
                  onClick={onCreateNewEvent}
                  disabled={name?.trim() === ""}
                >
                  Go
                </Button>
              </InputRightElement>
            </InputGroup>
          </form>
          <Flex
            border="1px solid"
            borderColor="gray.200"
            borderRadius="md"
            h="12"
            alignItems="center"
            w="100%"
            px="4"
            justifyContent="center"
            minW="0"
          >
            {selectedEvent.current != null ? (
              <Text
                fontSize="xl"
                color="gray.600"
                whiteSpace="nowrap"
                overflow="hidden"
                textOverflow="ellipsis"
              >
                {selectedEvent.current.name}
              </Text>
            ) : null}
          </Flex>
        </Grid>
        <Text fontSize="4xl" textAlign="center" mb="8">
          {selectedEvent.current
            ? formatTime(selectedEvent.current.duration)
            : "00:00"}
        </Text>
        <Grid
          gap="4"
          templateColumns={"repeat( auto-fill, minmax(250px, 1fr) );"}
        >
          {events.map((e) => (
            <SingleEvent
              key={e.id}
              {...e}
              onPlay={() => onPlay(e)}
              onStop={onStop}
              onDelete={() => onDelete(e)}
            />
          ))}
        </Grid>
      </Flex>
    </Box>
  );
}
